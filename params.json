{"name":"NingZeta-Sample-Redis","tagline":"Spring Redis Sample Usage","body":"# NingZeta-Sample-redis\r\nGeneral usage example of Redis with Spring.\r\n\r\n* Use of Spring-boot auto-configuration for Redis properties\r\n* Use of customize configuration of Redis.\r\n* Generic RedisTemplate usage.\r\n\r\n## Technology use\r\n* Spring-Boot\r\n* Spring Redis - Jedis\r\n\r\nRefer to `pom.xml` for details.\r\n\r\n## Requirement\r\n\r\n* Maven 3.x\r\n* Java 1.7+\r\n\r\n## Use of Spring-boot auto-configuration for Redis properties\r\nInject RedisConnectionFactory\r\n```java\r\n@Autowired\r\nprivate RedisConnectionFactory redisConnectionFactory;\r\n```\r\n## Use of Customize configuration of Redis.\r\nCreate a bean for the JedisConnectionFactory\r\n```java\r\n@Bean\r\nRedisConnectionFactory jedisConnectionFactory() {\r\n    JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory();\r\n    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\r\n\r\n    jedisConnectionFactory.setHostName(environment.getRequiredProperty(\"redis.host\"));\r\n    jedisConnectionFactory.setPassword(environment.getProperty(\"redis.password\"));\r\n    jedisConnectionFactory.setPort(environment.getRequiredProperty(\"redis.port\", Integer.class));\r\n    Boolean usePool = environment.getRequiredProperty(\"redis.pool.use\", Boolean.class)\r\n            .toString().equalsIgnoreCase(\"true\");\r\n    jedisConnectionFactory.setUsePool(usePool);\r\n\r\n    if (usePool) {\r\n        jedisPoolConfig.setMaxTotal(environment.getProperty(\"redis.pool.max-active\", Integer.class));\r\n        jedisPoolConfig.setMaxIdle(environment.getProperty(\"redis.pool.max-idle\", Integer.class));\r\n    }\r\n\r\n    return jedisConnectionFactory;\r\n}\r\n```\r\n## Generic RedisTemplate Serializer-DeSerializer usage.\r\nCreate a bean for the RedisTemplate that accepts Jackson2JsonRedisSerializer and/or StringRedisSerializer\r\naccording to the data-store format.\r\n```java\r\n@Bean\r\npublic RedisTemplate<?, ?> redisTemplate() {\r\n    RedisTemplate<?, ?> redisTemplate = new RedisTemplate<>();\r\n    // Use this when refine Connection Pool\r\n    redisTemplate.setConnectionFactory(jedisConnectionFactory());\r\n    redisTemplate.setDefaultSerializer(stringRedisSerializer());\r\n    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer());\r\n    return redisTemplate;\r\n}\r\n```\r\n\r\n## Usage\r\nThere are two profiles : dev || custom\r\nActivate the profile in the application.yml\r\n\r\n## Contributing\r\n\r\n1. Fork it!\r\n2. Create your feature branch: `git checkout -b my-new-feature`\r\n3. Commit your changes: `git commit -am 'Add some feature'`\r\n4. Push to the branch: `git push origin my-new-feature`\r\n5. Submit a pull request :D\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}